# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/ipynb/002_setup_annotation_project.ipynb.

# %% auto 0
__all__ = ['setup_project']

# %% ../../notebooks/ipynb/002_setup_annotation_project.ipynb 2
from pathlib import Path

import numpy as np
import supervision as sv
from label_studio_sdk.client import LabelStudio
from label_studio_sdk.converter.brush import decode_rle
from label_studio_sdk.types import Task
from supervision import Detections
from tqdm import tqdm

from .utils import parallel

# %% ../../notebooks/ipynb/002_setup_annotation_project.ipynb 4
def setup_project(
    client: LabelStudio,
    project_title: str,
    labels: list[str],
    frames_path: Path,
    model_url: str = "http://localhost:9090",
    img_ext: str = "jpg",
):
    # setup labels
    colors = ["#ffbe0b", "#fb5607", "#ff006e", "#8338ec", "#3a86ff"]
    annotation_labels = "\n".join(
        [
            f'<Label value="{label}" background="{colors[i]}"/>'
            for i, label in enumerate(labels)
        ]
    )

    label_config = f"""
    <View>
        <Image name="img" value="$image" zoom="true" width="100%" maxWidth="800" brightnessControl="true" contrastControl="true" gammaControl="true" />
        <Hypertext name="brush" className="help">
          <span> BrushLabels for manual labelling </span>
         </Hypertext>
        <BrushLabels name="label" toName="img" opacity="0.6">
            {annotation_labels}
        </BrushLabels>
        <Hypertext name="keypoints" className="help">
          <span> Keypoints for auto labelling </span>
         </Hypertext>
        <KeyPointLabels name="tag2" toName="img" smart="true">
            {annotation_labels}
        </KeyPointLabels>
    </View>"""

    # create project
    project = client.projects.create(
        title=project_title, description="Video annotation", label_config=label_config
    )

    # add storage
    storage = client.import_storage.local.create(
        title=f"{project_title} storage",
        description="Storage for annoataion task.",
        project=project.id,
        regex_filter=f".*{img_ext}",
        use_blob_urls=True,
        path=str(frames_path.resolve()),
    )

    # Sync storage
    client.import_storage.local.sync(id=storage.id)

    # Add ml model for interactive predictions
    client.ml.create(
        title=f"{project_title}_ml_model",
        description="Interactive annoataion",
        url=model_url,
        project=project.id,
        is_interactive=True,
    )

    return project
